/**
 *
 * Maple Mini bootloader updater sketch.
 * Based on sketch from Gregwar for Robotis OpenCM9.04, which is based on Maple bootloader code.
 *
 * WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
 * WARNING                                                                 WARNING
 * WARNING  This comes with NO WARRANTY, you use it at your own risk       WARNING
 * WARNING                                                                 WARNING
 * WARNING  Please read this warning text and the instructions below       WARNING
 * WARNING                                                                 WARNING
 * WARNING  Running this sketch will erase your bootloader replace it      WARNING
 * WARNING  with the new STM32duino bootloader                             WARNING
 * WARNING                                                                 WARNING
 * WARNING  Only use this sketch with Maple mini boards.                   WARNING
 * WARNING                                                                 WARNING
 * WARNING  Note. If your bootloader does get messed up, it is possible    WARNING
 * WARNING  to reflash using an external USB to Serial adaptor or another  WARNING
 * WARNING  Arduino board (to act as a USB to Serial device)               WARNING
 * WARNING                                                                 WARNING
 * WARNING  For more information see www.stm32duino.com                    WARNING
 * WARNING                                                                 WARNING
 * WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
 *
 *
 * Instructions.
 *
 * Upload this sketch onto your Maple mini.
 *
 * After upload the LED on the board should start to flash slowly (on for 1 sec off for 1 sec)
 *
 * Open the Serial Monitor and follow the on screen instructions
 *
 * If the version of the bootloader that is contained in this sketch is already installed,
 * a message is displayed and you will not be prompted to update.
 *
 * If prompted to update, press Y to agree and reflash the bootloader
 *
 * After the update has finished, the sketch will wait for you to manually reset the board
 * or to upload a new sketch
 *
 * If you just reset the board. This sketch will run again, as it will not be touched by the bootloader update
 * However it will display the message to indicate that this bootloader has already been installed
 *
 * For support please register to www.stm32duino.com
 *
 * Credit goes to Victor PV, Matthis, Ray.
 *
 * For source code and binaries for the bootloader see
 * www.github.com/rogerclarkmelbourne/stm32duino-bootloader
 *
 * See also www.rogerclark.net
 *
 */

// Data of bootloader
const char maple_mini_boot20[]={
 0,80,0,32,241,0,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,1,0,8,57,1,0,8,0,0,0,0,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,
  8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,189,4,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,
  57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,57,1,0,8,95,248,8,241,0,33,0,240,4,184,11,75,91,88,67,80,4,49,10,72,10,75,66,24,154,
  66,255,244,246,175,9,74,0,240,3,184,0,35,66,248,4,59,7,75,154,66,255,244,249,175,0,240,39,250,112,71,44,25,0,8,0,0,0,32,200,2,0,32,200,2,0,32,12,3,0,32,255,247,254,191,112,71,112,71,112,71,3,40,140,191,
  2,32,0,32,112,71,112,71,0,0,3,75,27,104,155,122,19,177,2,75,5,34,26,96,112,71,4,3,0,32,16,3,0,32,112,71,112,71,112,71,112,71,112,71,112,71,1,75,4,34,26,96,112,71,16,3,0,32,16,181,0,240,105,252,33,75,33,
  74,27,104,0,36,18,104,156,114,210,121,32,70,90,114,30,74,31,75,20,96,25,104,33,244,236,65,33,240,112,1,65,244,0,113,137,178,25,96,25,104,33,244,224,65,33,240,64,1,137,178,129,240,16,1,25,96,17,104,21,75,
  137,178,11,68,91,0,64,33,25,96,19,104,128,34,155,178,3,241,0,83,3,245,64,83,91,0,26,96,0,240,52,254,14,75,32,70,27,104,147,248,48,16,0,240,134,254,32,70,0,240,27,254,10,75,1,34,32,70,189,232,16,64,26,96,
  1,240,29,187,0,191,4,3,0,32,184,2,0,32,80,92,0,64,0,92,0,64,4,48,0,32,220,2,0,32,16,3,0,32,56,181,18,75,5,70,26,104,28,70,18,120,2,240,127,2,33,42,25,209,0,240,176,252,176,177,104,30,4,40,19,216,223,232,
  0,240,3,5,7,18,9,0,9,75,4,224,9,75,2,224,9,75,0,224,9,75,34,104,0,36,32,70,147,97,84,130,152,71,32,70,56,189,2,32,56,189,4,3,0,32,233,10,0,8,17,11,0,8,209,10,0,8,185,10,0,8,1,73,1,240,219,184,0,191,68,
  1,0,32,1,73,1,240,213,184,0,191,184,2,0,32,5,75,27,104,155,120,7,43,4,216,4,73,1,235,195,1,1,240,200,184,0,32,112,71,4,3,0,32,148,0,0,32,1,73,1,240,191,184,0,191,224,0,0,32,8,181,8,75,27,104,27,120,3,240,
  127,3,33,43,6,209,0,240,96,252,0,40,12,191,2,32,0,32,8,189,2,32,8,189,0,191,4,3,0,32,56,181,19,76,9,32,37,104,0,240,94,251,40,64,64,240,80,5,37,96,4,60,32,70,9,33,1,34,0,240,154,249,32,70,0,34,9,33,0,240,
  149,249,0,240,95,251,9,75,194,178,24,96,8,75,192,243,7,32,131,248,41,32,131,248,42,0,6,75,90,113,152,113,189,232,56,64,0,240,168,190,4,12,1,64,200,2,0,32,236,0,0,32,41,1,0,32,4,75,26,104,146,178,66,240,
  12,2,26,96,2,75,3,34,26,96,112,71,64,92,0,64,16,3,0,32,4,75,79,246,251,114,25,104,10,64,26,96,79,244,63,66,26,96,112,71,64,92,0,64,16,181,30,76,7,40,24,191,32,112,35,120,5,43,50,216,223,232,3,240,3,6,10,
  14,22,33,255,247,229,255,42,224,255,247,226,255,4,35,39,224,2,35,99,112,3,35,35,224,99,120,1,59,219,178,99,112,99,120,243,185,4,34,23,224,15,75,26,104,146,178,66,240,16,2,26,96,5,35,35,112,10,35,99,112,
  16,189,99,120,1,59,219,178,99,112,99,120,91,185,7,74,79,246,239,115,17,104,11,64,19,96,6,34,2,75,26,112,16,189,6,35,35,112,16,189,206,2,0,32,64,92,0,64,6,75,1,34,26,96,6,74,0,32,6,73,24,96,16,96,79,244,
  224,82,10,128,26,96,112,71,0,191,64,92,0,64,68,92,0,64,8,3,0,32,7,181,20,35,141,248,4,48,0,35,141,248,5,48,141,248,6,48,1,168,1,35,141,248,7,48,0,240,255,249,3,176,93,248,4,251,16,181,0,240,205,250,9,75,
  0,36,27,104,156,114,255,247,209,255,7,75,7,74,28,96,79,244,63,67,19,128,6,74,19,96,255,247,219,255,5,75,28,96,16,189,4,3,0,32,68,92,0,64,8,3,0,32,64,92,0,64,16,3,0,32,7,181,20,35,141,248,4,48,1,168,0,35,
  141,248,5,48,141,248,6,48,141,248,7,48,0,240,206,249,3,176,93,248,4,251,0,0,112,181,39,77,39,76,43,104,39,78,155,178,35,128,34,136,51,136,19,64,89,5,5,213,79,246,255,51,43,96,35,75,91,104,152,71,34,136,
  51,136,26,64,146,4,68,191,77,246,255,114,42,96,34,136,19,64,219,4,5,213,78,246,255,115,43,96,0,32,255,247,66,255,34,136,51,136,19,64,24,5,4,213,255,247,33,255,79,242,255,115,43,96,34,136,51,136,26,64,145,
  5,7,213,79,246,255,82,42,96,16,74,17,120,1,49,201,178,17,112,34,136,19,64,218,5,5,213,79,246,255,99,43,96,7,32,255,247,33,255,34,136,51,136,19,64,27,4,3,213,189,232,112,64,0,240,244,188,112,189,0,191,68,
  92,0,64,204,2,0,32,8,3,0,32,0,0,0,32,12,3,0,32,55,181,0,240,165,248,0,240,199,248,0,240,245,248,255,247,185,254,0,240,7,249,0,240,63,249,1,40,4,70,2,208,2,40,51,208,8,224,0,144,4,33,40,72,5,34,79,244,160,
  35,0,240,101,248,67,224,1,36,36,72,0,148,4,33,5,34,79,244,160,35,0,240,91,248,33,72,0,240,248,248,40,177,0,240,77,248,4,28,24,191,1,36,48,224,29,72,0,240,238,248,96,179,244,231,1,34,0,146,23,72,4,33,79,
  244,128,19,0,240,68,248,0,240,254,251,8,177,0,240,1,252,1,53,5,45,239,221,0,44,237,209,17,72,0,240,215,248,8,177,15,72,4,224,13,72,0,240,209,248,24,177,11,72,0,240,101,249,13,224,1,35,0,147,7,72,4,33,5,
  34,79,244,160,35,0,240,35,248,0,240,107,249,1,224,0,37,223,231,0,32,3,176,48,189,0,191,0,8,1,64,0,80,0,8,0,32,0,8,1,35,3,250,1,241,210,241,1,2,56,191,0,34,19,1,153,64,1,97,112,71,0,0,2,75,24,104,192,243,
  0,32,112,71,0,191,8,12,1,64,45,233,240,71,157,248,32,160,20,70,202,241,1,7,255,178,58,70,128,70,137,70,30,70,255,247,222,255,180,177,53,70,21,177,0,191,1,61,251,231,64,70,73,70,82,70,255,247,211,255,53,
  70,21,177,0,191,1,61,251,231,64,70,73,70,58,70,1,60,255,247,200,255,228,178,231,231,189,232,240,135,13,75,14,73,26,104,66,240,1,2,26,96,12,74,16,104,1,64,17,96,25,104,33,240,132,113,33,244,128,49,25,96,
  25,104,33,244,128,33,25,96,19,104,35,244,254,3,19,96,4,75,0,34,26,96,112,71,0,16,2,64,0,0,255,248,4,16,2,64,8,16,2,64,21,75,26,104,66,240,1,18,26,96,26,104,18,72,146,3,251,213,18,74,18,33,17,96,162,246,
  252,114,17,104,65,244,232,17,65,244,128,97,17,96,1,104,65,240,128,113,1,96,25,104,17,240,64,127,251,208,17,104,65,240,2,1,17,96,17,104,9,7,252,213,154,105,66,244,254,114,154,97,218,105,66,244,0,2,218,97,
  112,71,0,16,2,64,0,32,2,64,8,75,9,74,163,242,4,67,195,248,4,36,79,240,128,114,195,248,16,36,26,104,34,244,112,34,66,244,128,50,26,96,112,71,0,191,4,12,1,64,8,12,1,64,5,75,26,104,209,7,3,212,26,104,66,240,
  1,2,26,96,26,104,146,7,252,213,112,71,0,16,2,64,3,104,3,72,24,64,176,241,0,83,88,66,88,65,112,71,0,0,254,47,4,74,8,181,67,104,16,96,2,104,130,243,8,136,152,71,8,189,0,191,8,237,0,224,8,75,218,105,66,240,
  192,82,218,97,163,245,208,51,26,104,66,244,128,114,26,96,4,74,16,133,26,104,34,244,128,114,26,96,112,71,0,16,2,64,0,108,0,64,56,181,15,75,68,242,76,33,218,105,29,70,66,240,192,82,218,97,12,74,18,141,146,
  178,138,66,5,208,68,242,77,35,154,66,3,208,0,36,9,224,1,36,0,224,2,36,0,32,255,247,208,255,235,105,35,240,192,83,235,97,32,70,56,189,0,16,2,64,0,108,0,64,24,75,48,181,219,104,68,120,219,67,195,243,2,35,
  195,241,4,2,4,250,2,242,15,36,220,64,129,120,3,120,12,64,20,67,3,240,3,1,201,0,36,1,255,34,140,64,138,64,3,240,252,3,3,241,96,67,3,245,97,67,211,248,0,83,37,234,2,1,34,64,10,67,195,248,0,35,3,120,1,34,
  89,9,3,240,31,3,2,250,3,243,3,74,66,248,33,48,48,189,0,191,0,237,0,224,0,225,0,224,7,75,79,240,255,50,195,248,128,32,195,248,132,32,195,248,128,33,195,248,132,33,4,34,67,248,240,44,112,71,0,191,0,225,0,
  224,16,181,7,75,128,34,4,70,26,96,255,247,213,253,255,247,229,255,255,247,229,254,32,70,189,232,16,64,255,247,98,191,16,32,2,64,2,74,3,75,218,96,0,191,253,231,0,191,4,0,250,5,0,237,0,224,10,75,16,181,26,
  104,2,34,26,96,9,74,17,104,20,70,17,240,1,15,249,209,144,96,66,34,26,96,34,104,18,240,1,1,251,209,25,96,1,32,16,189,0,191,16,32,2,64,12,32,2,64,55,181,139,178,0,147,11,12,1,147,14,75,1,34,28,104,26,96,
  13,74,21,104,237,7,251,212,1,157,173,178,69,128,21,104,237,7,252,212,0,157,173,178,5,128,21,104,237,7,252,212,36,240,1,2,26,96,0,104,67,26,88,66,88,65,3,176,48,189,16,32,2,64,12,32,2,64,1,75,128,34,26,
  96,112,71,16,32,2,64,3,75,4,74,26,96,2,241,136,50,26,96,112,71,0,191,4,32,2,64,35,1,103,69,7,40,200,191,8,56,15,35,128,0,3,250,0,240,192,67,112,71,0,0,2,75,24,136,0,245,0,48,128,2,112,71,224,247,255,31,
  4,75,27,136,129,43,52,191,79,244,128,96,79,244,0,96,112,71,0,191,224,247,255,31,14,74,0,35,2,33,19,112,83,112,147,112,211,112,17,113,83,113,147,96,10,74,11,73,19,96,11,74,19,128,11,74,17,96,11,74,1,245,
  136,65,17,96,10,74,3,33,19,112,9,74,17,112,9,74,19,112,112,71,0,191,32,11,0,32,24,11,0,32,0,12,0,32,22,11,0,32,196,2,0,32,192,2,0,32,28,11,0,32,208,2,0,32,44,11,0,32,8,181,14,75,14,72,25,121,0,34,201,178,
  1,41,2,96,8,209,2,33,25,113,26,112,255,247,36,255,189,232,8,64,255,247,220,188,17,240,253,15,6,208,2,33,25,113,26,112,189,232,8,64,255,247,58,191,8,189,0,191,32,11,0,32,24,11,0,32,5,75,26,121,8,42,5,209,
  154,104,1,58,154,96,10,185,255,247,42,191,112,71,0,191,32,11,0,32,32,185,3,75,1,34,27,104,26,130,112,71,1,72,112,71,4,3,0,32,36,11,0,32,32,185,3,75,6,34,27,104,26,130,112,71,1,72,112,71,4,3,0,32,32,11,
  0,32,6,75,27,104,48,185,218,136,89,138,81,26,25,130,4,75,26,128,112,71,91,138,3,72,24,68,112,71,4,3,0,32,22,11,0,32,20,3,0,32,8,75,48,185,27,104,8,74,17,136,90,138,138,26,26,130,112,71,6,73,6,74,27,104,
  18,104,8,104,91,138,16,68,24,68,112,71,4,3,0,32,22,11,0,32,196,2,0,32,24,11,0,32,112,181,18,75,18,78,27,120,52,104,2,43,4,241,0,100,12,191,4,245,160,68,4,245,0,84,32,70,255,247,218,254,0,37,12,75,26,136,
  146,178,149,66,6,218,10,75,96,25,233,88,255,247,233,254,4,53,243,231,49,104,26,136,146,178,10,68,50,96,0,34,26,128,112,189,0,191,28,11,0,32,24,11,0,32,22,11,0,32,20,3,0,32,45,233,240,65,132,73,133,76,1,
  32,8,112,35,121,0,34,219,178,2,43,34,112,91,209,8,112,129,73,9,104,72,120,1,40,42,209,200,136,0,40,0,240,202,128,125,72,9,123,2,96,1,41,79,240,3,2,34,113,11,208,2,41,26,209,121,75,26,112,121,74,122,75,
  26,96,255,247,211,253,255,247,217,254,11,224,119,73,118,74,17,96,115,74,19,112,255,247,201,253,255,247,207,254,113,72,255,247,134,254,68,242,77,32,255,247,228,253,200,224,10,35,98,224,2,40,33,209,9,35,
  35,113,202,136,108,75,26,128,24,136,108,74,128,178,16,128,26,136,75,136,146,178,90,67,98,75,26,96,11,123,1,43,3,208,2,43,9,209,97,74,0,224,98,74,96,75,26,96,255,247,190,254,98,75,24,96,166,224,10,35,35,
  113,3,35,161,224,6,40,60,208,3,40,0,240,144,128,5,40,59,224,3,43,11,209,82,74,18,104,82,120,3,42,4,209,5,35,35,113,255,247,95,255,143,224,5,42,45,224,4,43,8,209,84,73,8,120,2,40,121,209,3,35,98,112,11,
  112,5,35,116,224,5,43,20,209,70,75,26,104,83,120,1,43,8,209,211,136,11,177,3,35,105,224,6,35,35,113,255,247,108,254,114,224,6,43,82,208,3,43,80,208,5,43,104,209,77,224,6,43,11,209,58,73,9,104,73,120,3,
  41,3,209,8,35,35,113,34,112,96,224,5,41,90,209,79,224,7,43,246,208,8,43,4,209,35,113,79,244,250,115,163,96,84,224,9,43,60,209,47,75,26,104,83,120,2,43,45,209,208,136,56,179,49,73,82,136,11,136,46,77,155,
  178,83,67,41,74,48,78,19,96,47,104,210,248,0,128,177,248,0,192,71,68,51,104,31,250,140,252,103,68,159,66,40,75,3,216,10,136,146,178,26,128,25,224,54,104,45,104,17,104,114,27,82,26,146,178,26,128,26,136,
  146,178,130,66,8,211,0,34,26,128,5,224,10,35,35,113,9,35,30,224,6,43,1,209,2,35,13,224,3,43,1,208,5,43,19,209,9,35,7,224,10,43,15,209,15,75,27,104,91,120,3,43,2,209,10,35,35,113,11,224,5,43,250,208,4,43,
  3,209,2,35,35,113,0,35,2,224,10,35,35,113,15,35,35,112,32,120,208,241,1,0,56,191,0,32,189,232,240,129,0,191,44,11,0,32,32,11,0,32,4,3,0,32,24,11,0,32,28,11,0,32,0,32,0,8,196,2,0,32,0,80,0,8,20,11,0,32,
  22,11,0,32,192,2,0,32,208,2,0,32,1,75,24,120,112,71,0,191,44,11,0,32,8,181,66,242,40,51,0,191,1,59,252,209,255,247,76,254,247,231,128,0,0,241,128,64,0,245,184,64,3,104,202,6,35,244,224,67,35,240,64,3,155,
  178,72,191,131,240,16,3,138,6,72,191,131,240,32,3,3,96,112,71,128,0,0,241,128,64,0,245,184,64,3,104,35,244,128,67,35,240,112,3,155,178,131,244,64,83,3,96,112,71,128,0,0,241,128,64,0,245,184,64,3,104,35,
  244,226,67,35,240,112,3,27,4,27,12,3,96,112,71,128,0,0,241,128,64,0,245,184,64,3,104,91,4,6,213,2,104,72,246,143,115,19,64,67,244,128,67,3,96,112,71,128,0,0,241,128,64,0,245,184,64,3,104,91,6,6,213,2,104,
  72,246,143,115,19,64,67,240,64,3,3,96,112,71,0,0,5,75,27,104,155,178,3,235,192,0,0,241,0,80,0,245,64,80,64,0,0,136,112,71,80,92,0,64,4,75,27,104,155,178,3,235,192,0,3,75,3,68,91,0,24,136,112,71,80,92,0,
  64,4,48,0,32,4,75,27,104,155,178,3,235,192,0,3,75,3,68,91,0,25,96,112,71,80,92,0,64,2,48,0,32,13,75,62,41,27,104,155,178,3,235,192,0,11,75,3,68,79,234,67,2,9,217,75,9,200,6,4,191,3,241,255,51,155,178,155,
  2,67,244,0,67,4,224,75,8,201,7,72,191,1,51,155,2,19,96,112,71,80,92,0,64,6,48,0,32,112,181,76,74,76,75,17,104,136,178,12,4,24,128,64,241,144,128,71,246,255,113,17,96,26,136,72,76,2,240,15,2,34,112,0,42,
  95,209,70,76,70,77,34,104,70,78,2,244,64,82,42,128,34,104,2,240,48,2,50,128,34,104,34,244,128,66,34,240,112,2,146,178,130,244,0,82,34,96,34,104,34,244,224,66,34,240,64,2,146,178,130,240,32,2,34,96,27,136,
  216,6,2,213,35,104,25,6,7,213,34,104,72,246,15,115,19,64,35,96,0,240,97,252,18,224,26,5,7,213,34,104,64,246,143,115,19,64,35,96,0,240,105,250,8,224,24,4,182,213,34,104,64,246,143,115,19,64,35,96,0,240,
  205,251,35,104,42,136,35,244,128,67,35,240,112,3,155,178,209,4,72,191,131,244,128,83,149,4,33,74,72,191,131,244,0,83,19,96,19,104,49,136,35,244,224,67,35,240,64,3,155,178,204,6,72,191,131,240,16,3,136,
  6,72,191,131,240,32,3,19,96,112,189,147,0,3,241,128,67,3,245,184,67,29,104,41,4,9,213,24,104,64,246,143,113,1,64,25,96,18,75,1,58,83,248,34,48,152,71,43,6,127,245,121,175,33,120,72,246,15,114,139,0,3,241,
  128,67,3,245,184,67,24,104,1,57,2,64,26,96,9,75,83,248,33,48,152,71,103,231,112,189,68,92,0,64,204,2,0,32,224,2,0,32,0,92,0,64,210,2,0,32,212,2,0,32,80,0,0,32,52,0,0,32,8,181,7,74,7,75,8,73,19,96,2,34,
  26,114,7,75,7,74,19,96,7,74,27,104,17,96,152,71,8,189,0,191,4,3,0,32,228,2,0,32,108,0,0,32,0,0,0,32,220,2,0,32,0,3,0,32,16,181,6,76,24,185,35,104,1,34,26,130,16,189,4,75,27,104,27,104,152,71,32,104,10,
  48,16,189,4,3,0,32,0,3,0,32,16,181,6,76,24,185,35,104,1,34,26,130,16,189,4,75,27,104,155,104,152,71,32,104,12,48,16,189,4,3,0,32,0,3,0,32,16,181,32,75,24,185,27,104,2,34,26,130,16,189,30,74,25,104,0,32,
  16,128,12,120,19,70,20,240,127,4,13,209,74,122,145,6,68,191,2,33,25,112,18,240,64,15,26,120,20,191,34,240,1,2,66,240,1,2,20,224,1,44,31,208,2,44,30,209,9,121,1,240,15,2,146,0,2,241,128,66,2,245,184,66,
  17,240,128,15,18,104,6,208,2,240,48,2,16,42,7,209,1,34,26,112,4,224,2,244,64,82,178,245,128,95,246,231,5,75,27,104,27,105,152,71,2,72,16,189,16,70,16,189,4,3,0,32,10,3,0,32,0,3,0,32,35,74,45,233,248,67,
  20,104,144,70,35,138,38,122,33,79,163,185,4,46,18,209,32,73,10,120,1,42,10,209,31,74,16,104,31,74,128,178,2,68,82,0,19,96,48,34,58,128,11,112,39,224,16,35,59,128,7,38,35,224,165,138,171,66,140,191,2,38,
  4,38,157,66,40,191,29,70,40,70,163,105,152,71,129,70,0,32,255,247,87,254,42,70,1,70,72,70,0,240,104,251,41,70,0,32,255,247,106,254,35,138,79,244,64,82,91,27,35,130,99,138,29,68,48,35,59,128,9,75,101,130,
  26,128,216,248,0,48,30,114,189,232,248,131,0,191,4,3,0,32,212,2,0,32,45,11,0,32,80,92,0,64,2,48,0,32,210,2,0,32,16,181,10,75,10,73,27,104,73,120,154,120,145,66,10,211,217,120,65,185,156,136,52,185,154,
  114,6,75,27,104,91,104,152,71,32,70,16,189,2,32,16,189,0,191,4,3,0,32,144,0,0,32,0,3,0,32,56,181,14,74,14,76,18,104,35,104,146,105,24,121,153,120,144,71,35,104,154,122,122,177,112,185,90,121,98,185,221,
  120,85,185,8,75,27,104,219,104,152,71,35,104,40,70,26,121,218,114,154,120,26,115,56,189,2,32,56,189,220,2,0,32,4,3,0,32,0,3,0,32,56,181,47,75,27,104,24,120,16,240,127,0,4,209,90,122,34,240,32,2,90,114,
  56,189,2,40,78,209,90,136,0,42,76,209,90,121,0,42,73,209,26,121,38,77,34,240,128,0,132,0,4,241,128,65,1,245,184,65,9,104,45,120,18,240,128,15,20,191,1,240,48,1,1,244,64,81,168,66,52,210,0,41,50,208,155,
  122,131,179,4,241,128,68,4,245,184,68,18,6,35,104,12,213,3,240,48,3,16,43,31,209,196,178,32,70,255,247,164,253,32,70,48,33,255,247,94,253,22,224,3,244,64,83,179,245,128,95,17,209,40,185,14,75,147,248,48,
  16,255,247,207,253,1,224,255,247,129,253,35,104,35,244,128,67,35,240,112,3,155,178,131,244,64,83,35,96,7,75,27,104,91,105,152,71,0,32,56,189,2,32,56,189,0,191,4,3,0,32,144,0,0,32,0,0,0,32,0,3,0,32,56,181,
  29,75,29,77,25,104,45,120,10,121,34,240,128,4,163,0,3,241,128,64,0,245,184,64,0,104,18,240,128,15,20,191,0,240,48,0,0,244,64,80,172,66,34,210,76,136,4,187,248,177,137,122,233,177,3,241,128,67,3,245,184,
  67,18,240,128,15,26,104,7,208,34,244,224,66,34,240,64,2,146,178,130,240,16,2,6,224,34,244,128,66,34,240,112,2,146,178,130,244,128,82,26,96,5,75,27,104,155,105,152,71,0,32,56,189,2,32,56,189,4,3,0,32,144,
  0,0,32,0,3,0,32,8,181,6,75,27,104,90,122,66,240,32,2,90,114,4,75,27,104,219,105,152,71,0,32,8,189,0,191,4,3,0,32,0,3,0,32,5,75,26,104,83,138,24,185,137,136,203,26,19,130,112,71,8,104,24,68,112,71,0,191,
  4,3,0,32,8,181,11,75,0,32,147,248,48,16,255,247,73,253,9,75,27,104,24,122,8,40,6,209,7,75,79,244,128,82,26,128,6,75,16,34,26,128,176,241,9,3,88,66,88,65,8,189,0,0,0,32,4,3,0,32,210,2,0,32,212,2,0,32,115,
  181,150,78,150,75,50,104,150,77,146,178,19,68,91,0,26,104,43,104,25,122,9,41,15,208,146,178,82,0,2,241,128,66,2,245,192,66,17,120,25,112,81,120,89,112,145,136,89,128,17,137,153,128,146,137,218,128,1,34,
  26,114,218,136,92,120,0,42,97,209,26,120,18,240,127,2,58,209,9,44,2,209,255,247,171,254,68,224,5,44,15,209,147,249,2,32,0,42,1,218,8,35,77,224,218,120,0,42,250,209,154,136,0,42,247,209,155,122,0,43,55,
  208,243,231,3,44,19,209,154,120,1,42,7,208,120,75,32,70,27,104,91,105,152,71,3,40,40,209,53,224,154,136,0,42,244,209,91,122,152,6,241,213,255,247,109,255,28,224,1,44,236,209,154,120,1,42,233,209,154,136,
  0,42,230,209,91,122,153,6,227,213,255,247,181,254,14,224,1,42,4,209,11,44,220,209,255,247,138,254,7,224,2,42,215,209,1,44,241,208,3,44,211,209,255,247,13,255,16,177,207,231,0,40,188,209,50,104,95,75,146,
  178,19,68,91,0,0,34,26,96,93,75,48,34,26,128,6,35,0,224,9,35,42,104,19,114,212,224,6,44,24,209,26,120,82,6,124,209,218,120,84,75,1,42,2,209,27,104,219,105,108,224,2,42,2,209,27,104,27,106,103,224,3,42,
  2,209,27,104,91,106,98,224,33,42,105,209,27,104,155,106,93,224,0,44,60,209,89,136,0,41,97,209,90,104,34,240,255,2,178,245,0,63,91,209,26,120,18,240,127,2,4,209,155,136,0,43,0,240,171,128,82,224,1,42,12,
  209,62,74,24,121,18,104,146,105,144,71,0,40,73,209,43,104,155,122,0,43,64,240,156,128,67,224,2,42,65,209,27,121,57,72,3,240,15,1,138,0,2,241,128,66,2,245,184,66,18,104,0,120,19,240,128,15,20,191,2,240,
  48,2,2,244,64,82,129,66,45,210,19,240,112,15,42,209,0,42,127,209,39,224,8,44,3,209,27,120,91,6,123,208,33,224,10,44,31,209,26,120,2,240,127,2,1,42,26,209,154,122,194,177,89,136,177,185,90,104,34,240,255,
  2,178,245,128,63,16,209,30,74,24,121,18,104,146,105,144,71,0,40,100,208,8,224,59,177,42,104,0,36,84,130,147,97,32,70,152,71,32,70,10,224,22,75,26,104,43,104,18,105,88,120,144,71,3,40,2,209,17,75,27,104,
  5,224,43,104,79,246,255,113,26,138,138,66,1,209,9,34,3,224,2,40,0,208,18,185,8,34,26,114,57,224,147,249,0,16,0,41,47,218,217,136,1,145,1,152,130,66,5,72,17,217,1,154,26,130,31,224,0,191,80,92,0,64,4,48,
  0,32,4,3,0,32,220,2,0,32,2,48,0,32,212,2,0,32,144,0,0,32,138,66,14,210,1,104,145,248,48,16,138,66,1,210,0,33,5,224,146,251,241,244,1,251,20,34,18,185,1,33,12,74,17,112,2,104,146,248,48,32,154,130,255,247,
  47,253,5,224,3,34,26,114,7,75,79,244,64,82,26,128,255,247,132,254,2,176,112,189,4,75,158,231,4,75,156,231,4,75,154,231,45,11,0,32,210,2,0,32,21,17,0,8,205,16,0,8,241,16,0,8,248,181,43,77,44,104,35,122,
  3,43,1,208,5,43,65,209,163,105,34,138,171,177,162,177,166,138,150,66,40,191,22,70,48,70,152,71,35,138,7,70,155,27,35,130,99,138,0,32,51,68,99,130,255,247,138,251,50,70,1,70,56,70,0,240,165,248,35,138,83,
  177,27,75,0,32,79,244,64,82,1,70,26,128,255,247,137,251,24,75,48,34,26,128,35,138,162,138,154,66,2,216,43,104,3,34,2,224,27,177,43,104,5,34,26,114,12,224,42,104,6,33,17,114,16,74,17,104,16,74,137,178,10,
  68,82,0,19,96,11,75,48,34,26,128,43,104,27,122,6,224,7,43,3,209,10,75,27,104,219,104,152,71,8,35,42,104,19,114,189,232,248,64,255,247,27,190,0,191,4,3,0,32,210,2,0,32,212,2,0,32,80,92,0,64,2,48,0,32,220,
  2,0,32,48,181,11,75,28,120,0,35,163,66,12,210,3,241,128,82,2,245,184,82,145,0,13,104,72,246,143,114,42,64,26,67,10,96,1,51,240,231,3,75,64,240,128,0,24,96,48,189,144,0,0,32,76,92,0,64,16,181,19,76,35,104,
  26,122,2,42,1,208,4,42,4,209,255,247,138,252,35,104,27,122,19,224,6,42,16,209,90,120,5,42,9,209,26,120,82,6,6,209,152,120,255,247,204,255,8,75,27,104,27,106,152,71,7,75,27,104,155,104,152,71,8,35,34,104,
  19,114,189,232,16,64,255,247,203,189,0,191,4,3,0,32,0,3,0,32,220,2,0,32,48,181,1,241,0,81,1,50,1,245,64,81,82,16,73,0,0,35,147,66,0,241,2,0,9,208,16,248,1,92,16,248,2,76,68,234,5,36,33,248,35,64,1,51,241,
  231,48,189,16,181,1,241,0,81,1,50,1,245,64,81,82,16,73,0,0,35,147,66,5,208,81,248,35,64,32,248,19,64,1,51,247,231,16,189,89,4,0,8,129,1,0,8,63,1,0,8,65,1,0,8,41,2,0,8,205,2,0,8,67,1,0,8,137,2,0,8,149,2,
  0,8,161,2,0,8,193,2,0,8,0,0,0,0,64,0,0,0,61,1,0,8,61,1,0,8,61,1,0,8,61,1,0,8,61,1,0,8,61,1,0,8,61,1,0,8,61,1,0,8,61,1,0,8,61,1,0,8,61,1,0,8,61,1,0,8,61,1,0,8,61,1,0,8,77,1,0,8,81,1,0,8,105,1,0,8,107,1,
  0,8,109,1,0,8,111,1,0,8,113,1,0,8,115,1,0,8,117,1,0,8,1,1,0,0,232,0,0,32,4,0,0,0,50,1,0,32,18,0,0,0,76,1,0,32,20,0,0,0,25,1,0,32,16,0,0,0,96,1,0,32,128,0,0,0,224,1,0,32,108,0,0,0,76,2,0,32,108,0,0,0,18,
  1,0,1,0,0,0,64,175,30,3,0,1,2,1,2,3,1,0,0,41,1,0,32,9,0,0,0,4,3,9,4,9,2,45,0,1,1,0,128,50,9,4,0,0,0,254,1,2,4,9,4,0,1,0,254,1,2,5,9,4,0,2,0,254,1,2,6,9,33,3,255,0,0,8,16,1,16,3,76,0,76,0,77,0,32,0,48,0,
  48,0,51,0,9,33,3,255,0,0,8,16,1,18,3,76,0,101,0,97,0,102,0,76,0,97,0,98,0,115,0,204,0,0,32,18,0,0,0,20,3,77,0,97,0,112,0,108,0,101,0,32,0,48,0,48,0,51,0,128,3,83,0,84,0,77,0,51,0,50,0,100,0,117,0,105,0,
  110,0,111,0,32,0,98,0,111,0,111,0,116,0,108,0,111,0,97,0,100,0,101,0,114,0,32,0,118,0,49,0,46,0,48,0,32,0,32,0,69,0,82,0,82,0,79,0,82,0,46,0,32,0,85,0,112,0,108,0,111,0,97,0,100,0,32,0,116,0,111,0,32,0,
  82,0,65,0,77,0,32,0,110,0,111,0,116,0,32,0,115,0,117,0,112,0,112,0,111,0,114,0,116,0,101,0,100,0,46,0,108,3,83,0,84,0,77,0,51,0,50,0,100,0,117,0,105,0,110,0,111,0,32,0,98,0,111,0,111,0,116,0,108,0,111,
  0,97,0,100,0,101,0,114,0,32,0,118,0,49,0,46,0,48,0,32,0,32,0,85,0,112,0,108,0,111,0,97,0,100,0,32,0,116,0,111,0,32,0,70,0,108,0,97,0,115,0,104,0,32,0,48,0,120,0,56,0,48,0,48,0,53,0,48,0,48,0,48,0,108,3,
  83,0,84,0,77,0,51,0,50,0,100,0,117,0,105,0,110,0,111,0,32,0,98,0,111,0,111,0,116,0,108,0,111,0,97,0,100,0,101,0,114,0,32,0,118,0,49,0,46,0,48,0,32,0,32,0,85,0,112,0,108,0,111,0,97,0,100,0,32,0,116,0,111,
  0,32,0,70,0,108,0,97,0,115,0,104,0,32,0,48,0,120,0,56,0,48,0,48,0,50,0,48,0,48,0,48,0,236,0,0,32,45,0,0,0,0,80,0,32,0,12,0,32,0   
};


#define BOARD_LED_PIN 33


typedef struct {
  volatile uint32 CR;
  volatile uint32 CFGR;
  volatile uint32 CIR;
  volatile uint32 APB2RSTR;
  volatile uint32 APB1RSTR;
  volatile uint32 AHBENR;
  volatile uint32 APB2ENR;
  volatile uint32 APB1ENR;
  volatile uint32 BDCR;
  volatile uint32 CSR;
} RCC_RegStruct;

typedef enum { RESET = 0, SET   = !RESET } FlagStatus, ITStatus;

typedef enum { DISABLE = 0, ENABLE  = !DISABLE} FunctionalState;

typedef enum { ERROR = 0, SUCCESS  = !ERROR} ErrorStatus;

#define BOOTLOADER_FLASH   ((uint32)0x08000000)
#define PAGE_SIZE          1024

#define SET_REG(addr,val) do { *(volatile uint32*)(addr)=val; } while(0)
#define GET_REG(addr)     (*(volatile uint32*)(addr))


#define RCC   ((uint32)0x40021000)
#define FLASH ((uint32)0x40022000)

#define RCC_CR      RCC
#define RCC_CFGR    (RCC + 0x04)
#define RCC_CIR     (RCC + 0x08)
#define RCC_AHBENR  (RCC + 0x14)
#define RCC_APB2ENR (RCC + 0x18)
#define RCC_APB1ENR (RCC + 0x1C)

#define FLASH_ACR     (FLASH + 0x00)
#define FLASH_KEYR    (FLASH + 0x04)
#define FLASH_OPTKEYR (FLASH + 0x08)
#define FLASH_SR      (FLASH + 0x0C)
#define FLASH_CR      (FLASH + 0x10)
#define FLASH_AR      (FLASH + 0x14)
#define FLASH_OBR     (FLASH + 0x1C)
#define FLASH_WRPR    (FLASH + 0x20)

#define FLASH_KEY1     0x45670123
#define FLASH_KEY2     0xCDEF89AB
#define FLASH_RDPRT    0x00A5
#define FLASH_SR_BSY   0x01
#define FLASH_CR_PER   0x02
#define FLASH_CR_PG    0x01
#define FLASH_CR_START 0x40

#define pRCC ((RCC_RegStruct *) RCC)



bool flashErasePage(uint32 pageAddr) {
  uint32 rwmVal = GET_REG(FLASH_CR);
  rwmVal = FLASH_CR_PER;
  SET_REG(FLASH_CR, rwmVal);

  while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
  SET_REG(FLASH_AR, pageAddr);
  SET_REG(FLASH_CR, FLASH_CR_START | FLASH_CR_PER);
  while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}

  /* todo: verify the page was erased */

  rwmVal = 0x00;
  SET_REG(FLASH_CR, rwmVal);

  return true;
}
bool flashErasePages(uint32 pageAddr, uint16 n) {
  while (n-- > 0) {
    if (!flashErasePage(pageAddr + 0x400 * n)) {
      return false;
    }
  }

  return true;
}

bool flashWriteWord(uint32 addr, uint32 word) {
  volatile uint16 *flashAddr = (volatile uint16 *)addr;
  volatile uint32 lhWord = (volatile uint32)word & 0x0000FFFF;
  volatile uint32 hhWord = ((volatile uint32)word & 0xFFFF0000) >> 16;

  uint32 rwmVal = GET_REG(FLASH_CR);
  SET_REG(FLASH_CR, FLASH_CR_PG);

  /* apparently we need not write to FLASH_AR and can
     simply do a native write of a half word */
  while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
  *(flashAddr + 0x01) = (volatile uint16)hhWord;
  while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
  *(flashAddr) = (volatile uint16)lhWord;
  while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}

  rwmVal &= 0xFFFFFFFE;
  SET_REG(FLASH_CR, rwmVal);

  /* verify the write */
  if (*(volatile uint32 *)addr != word) {
    return false;
  }

  return true;
}

void flashLock() {
  /* take down the HSI oscillator? it may be in use elsewhere */

  /* ensure all FPEC functions disabled and lock the FPEC */
  SET_REG(FLASH_CR, 0x00000080);
}

void flashUnlock() {
  /* unlock the flash */
  SET_REG(FLASH_KEYR, FLASH_KEY1);
  SET_REG(FLASH_KEYR, FLASH_KEY2);
}

/* Minimum_Source*/

void setupFLASH() {
  /* configure the HSI oscillator */
  if ((pRCC->CR & 0x01) == 0x00) {
    uint32 rwmVal = pRCC->CR;
    rwmVal |= 0x01;
    pRCC->CR = rwmVal;
  }

  /* wait for it to come on */
  while ((pRCC->CR & 0x02) == 0x00) {}
}

bool writeChunk(uint32 *ptr, int size, const char *data)
{
  flashErasePage((uint32)(ptr));

  for (int i = 0; i < size; i = i + 4) {
    if (!flashWriteWord((uint32)(ptr++), *((uint32 *)(data + i)))) {
      return false;
    }
  }

  return true;
}

bool isNewBootloaderAlreadyInstalled()
{
  char *existingBootloader = (char *) BOOTLOADER_FLASH;
  int bootloaderSize=sizeof(maple_mini_boot20);

  for(int i=0;i<bootloaderSize;i++)
  {
    if (  maple_mini_boot20[i]!= *(existingBootloader+i))
    {
      return false;
    }
  }
  return true;
}

void setup()
{
  char * bootloader = const_cast<char *>(maple_mini_boot20);
  int n = 0;
  bool alreadyInstalled = isNewBootloaderAlreadyInstalled();

  pinMode(BOARD_LED_PIN, OUTPUT);

  Serial.begin(9600);
  // Wait for the user to open the serial window.
  while (!(Serial.isConnected() && (Serial.getDTR() )))
  {
    digitalWrite(BOARD_LED_PIN, !digitalRead(BOARD_LED_PIN));
    delay(1000); // Slow blink
  }

  if (alreadyInstalled)
  {
    Serial.print("Congratulations. You have already updated to this version of the bootloader");
    while(1);
  }


  digitalWrite(BOARD_LED_PIN, LOW);
  Serial.println ("**************************************************************************************************");
  Serial.println ("*** This sketch will update the bootloader in the Maple Mini to the STM32duino bootloader     ****");
  Serial.println ("*** With this you can use up to 120KB of Flash and 20KB of RAM for a Sketch                   ****");
  Serial.println ("*** Uploading is also considerably faster on OSX (and possibly faster on Linux)               ****");
  Serial.println ("***                                                                                           ****");
  Serial.println ("***                      Only use with Maple mini boards                                      ****");
  Serial.println ("***                                                                                           ****");
  Serial.println ("*** WARNING. If the update fails your Maple mini may not have a functional bootloder.         ****");
  Serial.println ("***                                                                                           ****");
  Serial.println ("***                            YOU UPDATE AT YOUR OWN RISK                                    ****");
  Serial.println ("***                                                                                           ****");
  Serial.println ("***                                                                                           ****");
  Serial.println ("***                                                                                           ****");
  Serial.println ("***                                                                                           ****");
  Serial.println ("**************************************************************************************************");
  Serial.println ("***                                                                                           ****");
  Serial.println ("***                                                                                           ****");
  Serial.println ("***                         To confirm and proceed, enter Y                                   ****");
  Serial.println ("***                                                                                           ****");

  while (Serial.read() != 'Y')
  {
    delay(1);
  }

  Serial.println ("***                                                                                           ****");

  n = sizeof(maple_mini_boot20);

  setupFLASH();
  flashUnlock();

  int success = 1;
  int pages = n/PAGE_SIZE;
  int currentPage=1;
  for (int i = 0; i < n; i += PAGE_SIZE)
  {
    int size = 0;
    uint32* chunk = (uint32 *)(BOOTLOADER_FLASH + i);

    size = n - i;
    if (size > PAGE_SIZE)
    {
      size = PAGE_SIZE;
    }

    if (!writeChunk(chunk, size, &bootloader[i]))
    {
      Serial.println ();
      Serial.println ("WARNING, Update Failed!! The sketch will restart in 3 seconds and you can try to flash again");
      delay (3000);
      success = 0;
      break;
    }
    Serial.print("Writing flash page ");Serial.print(currentPage++);Serial.print(" of ");Serial.println(pages+1);
  }

  if (success)
  {
    flashLock();
    Serial.println ();
    Serial.println ("Update completed successfully. - Please test by uploading a different sketch");
    while (1) {
      digitalWrite(BOARD_LED_PIN, LOW);
      delay(500);
      digitalWrite(BOARD_LED_PIN, HIGH);
      delay(500);
    }
  }
}

void loop(){}

